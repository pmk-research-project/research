# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/20_utils.ipynb.

# %% auto 0
__all__ = ['get_home_directory', 'generate_weekday_dates', 'find_list_overlap']

# %% ../nbs/20_utils.ipynb 2
import os
import typing as ta

import pandas as pd

def get_home_directory() -> str:
    # Gets ~/
    return os.path.expanduser("~")

def generate_weekday_dates(start_date, end_date):
    """
    Generate a list of pandas dates excluding weekends (Saturdays and Sundays).
    
    Parameters:
        start_date (str or datetime): Start date in 'yyyy-mm-dd' format.
        end_date (str or datetime): End date in 'yyyy-mm-dd' format.

    Returns:
        list: List of pandas Timestamp objects representing weekdays.
    """
    # Convert the input strings to pandas datetime objects if they are not already.
    if not isinstance(start_date, pd.Timestamp):
        start_date = pd.to_datetime(start_date)
    if not isinstance(end_date, pd.Timestamp):
        end_date = pd.to_datetime(end_date)

    # Initialize an empty list to store the weekday dates.
    weekday_dates = []

    # Loop through the date range and add weekdays to the list.
    current_date = start_date
    while current_date <= end_date:
        # Check if the current date is not a Saturday (5) or Sunday (6).
        if current_date.weekday() < 5:
            weekday_dates.append(current_date)
        current_date += pd.DateOffset(days=1)

    return [str(i)[:10] for i in weekday_dates]

def find_list_overlap(list1, list2):
    """
    Find the overlap (intersection) between two lists.

    Parameters:
        list1 (list): The first input list.
        list2 (list): The second input list.

    Returns:
        list: A list containing the elements that are common to both input lists.
    """
    # Convert the lists to sets and use the intersection method to find common elements.
    common_elements = list(set(list1).intersection(list2))
    return common_elements

